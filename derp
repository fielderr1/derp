#!/usr/bin/env python

"""
Dockster
"""

import os
import subprocess
import sys
import yaml

from docker import Client

CONFIG_FILE = os.path.join(os.getenv("HOME"), ".derp.yml")

def save_config(config):
    """
    Save the config
    """

    with open(CONFIG_FILE, "w") as config_file:
        config_file.write(yaml.dump(config))

def print_help(exit=True):
    print("TODO: Help text")

    if exit:
        sys.exit(1)

def graph(cli, config):
    """
    Draw a graph of the connections between containers
    """

    link_set = {
        config["Name"]: set([
            link.split(":")[0]
            for link
            in config["HostConfig"]["Links"] or []
        ])
        for config
        in [
            cli.inspect_container(container)
            for container
            in cli.containers(all=True)
        ]
    }

    for name in sorted(link_set.keys()):
        print("{}:".format(name[1:]))

        for link in sorted(link_set[name]):
            print("    - {}".format(link[1:]))

def command_from_alias(config, alias, params, command):
    """
    Construct a docker command from the alias name
    """

    return [
        "docker",
        "run",
    ] + config["aliases"][alias]["parameters"] + [
        "--name",
        alias,
    ] + params + [
        config["aliases"][alias]["image"]
    ] + (command or config["aliases"][alias]["command"])

def run_command(command):
    """
    Run a command innit ;)
    """

    print "$ {}".format(" ".join(command))
    print

    subprocess.call(command)

def alias(cli, config, params):
    """
    Save some alias config
    """

    if len(params) == 0:
        for alias in config["aliases"]:
            print "{} = {}".format(
                alias,
                " ".join(command_from_alias(config, alias, [], []))
            )

        return

    if len(params) == 1:
        alias = params[0]

        if alias not in config["aliases"]:
            print("No such alias: {}".format(alias))
            sys.exit(1)

        print "{} = {}".format(
            alias,
            " ".join(command_from_alias(config, alias, [], []))
        )

        return

    if len(params) < 2:
        print_help()

    try:
        separator = params.index("--")
        params, command = params[:separator], params[separator+1:]
    except ValueError:
        command = []

    alias, params, image_name = params[0], params[1:-1], params[-1]

    if not any([
        tag == image_name or tag.startswith("{}:".format(image_name))
        for image in cli.images()
        for tag in image["RepoTags"]
    ]):
        print("No such image: {}".format(image_name))
        sys.exit(1)

    config["aliases"][alias] = {
        "image": image_name,
        "parameters": params,
        "command": command,
    }

    save_config(config)

    print "Alias saved: {}".format(alias)

def up(cli, config, params):
    """
    Start the container saved as alias
    """

    if len(params) == 0:
        print_help()

    try:
        separator = params.index("--")
        params, command = params[:separator], params[separator+1:]
    except ValueError:
        command = []

    alias, params = params[0], params[1:]

    if alias not in config["aliases"]:
        print("No such alias: {}".format(alias))
        sys.exit(1)

    command = command_from_alias(config, alias, params, command)

    # Check if there's an existing container
    for container in cli.containers(all=True):
        info = cli.inspect_container(container["Id"])

        if info["Name"] == "/{}".format(alias):
            if info["State"]["Paused"]:
                print("{} is paused; unpausing...".format(alias))
                command = ["docker", "unpause", alias]
            elif info["State"]["Running"] or info["State"]["Restarting"]:
                print("{} is already running".format(alias))
                return
            else:
                print("{} is stopped; attempting to start it...".format(alias))
                command = ["docker", "start", alias]

    run_command(command)

def down(cli, config, params):
    """
    Stop the container saves as alias
    """

    if len(params) != 1:
        print_help()

    alias = params[0]

    if alias not in config["aliases"]:
        print("No such alias: {}".format(alias))
        sys.exit(1)

    run_command(["docker", "stop", alias])

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print_help()
        sys.exit(1)

    try:
        with open(CONFIG_FILE) as config_file:
            config = yaml.load(config_file)
    except IOError:
        config = {
            "aliases": {}
        }
        save_config(config)

    cli = Client()

    if sys.argv[1] == "graph":
        graph(cli, config)

    elif sys.argv[1] == "alias":
        alias(cli, config, sys.argv[2:])

    elif sys.argv[1] == "up":
        up(cli, config, sys.argv[2:])

    elif sys.argv[1] == "down":
        down(cli, config, sys.argv[2:])
